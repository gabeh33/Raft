#!/usr/bin/env python3
import enum
import math
import sys, socket, select, time, json, random

# -----------------Program Arguments and Socket Connection-----------------#
# Your ID number
my_id = str(sys.argv[1])

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(my_id)

# -----------------Election and Leader/Candidate/Follower variables-----------------#
# The amount of time since the last heartbeat message, start it at the current time
last_heartbeat_recv = time.time()

# The amount of time (in seconds) that a server can go without a heartbeat,
# if this amount of time passes with no heartbeat from the leader then start an election
# in the range [1-1.2)
election_timeout = (random.random() / 5.0) + 1

# The maximum amount of time that an election can take to happen, if this amount of
# time goes by without a winner start a new election. Needs to be randomized in the case
# that there is a split vote, so that multiple servers are unlikely to start their next
# elections at the same time preventing another split election
# In the range [0.4-1.4)
election_window = random.random() + 0.2


# The state that this server is currently in
# servers start as followers, only leaders respond to client requests
class State(enum.Enum):
    leader = 1
    candidate = 2
    follower = 3


my_state = State.follower

# The id of who the server thinks is the leader
leader_id = "FFFF"

# The number of the current term, start at 0 increment every time
# this server receives news of a new election
current_term = 0

# The amount of votes this server has received, only matters when this server is a candidate
votes_received = 0

# A list of terms that this server has voted in, can only vote in a term once
terms_voted = []

# Start time of the most recent election
election_start = 0

# The last time this server sent out a heartbeat
last_heartbeat_sent = 0

# The interval that the server should send out a heartbeat, must be smaller than the
# election_timeout
heartbeat_interval = 0.3


# -----------------Messages-----------------#
# The types of messages that can be sent or received
GET = "get"
PUT = "put"
RD = "redirect"
OK = "ok"
FAIL = "fail"
HB = "heartbeat"
RV = "requestVote"
VOTE = "vote"
A_E_RPC = "append_entries_rpc"
A_OK = "append_okay"
# Fields of messages that must be there
SRCE = 'src'
DEST = 'dst'
LEADER = 'leader'
TYPE = 'type'
# Other fields
MID = 'MID'
TERM = 'term'  # Only for request vote RPCs, the term of the election to vote in
LENGTH = 'length'
LAST_ENTRY = 'last_entry'
KEY = 'key'
VAL = 'value'
OK = 'ok'
UPDATES = 'updates'  # Used for append_entries_rpc calls, a list of updates to the log
COMMIT = 'commit'  # Used for append_entries_rpc, the followers should commit up to and including this index
# from their log to their state machines
CLIENT_ID = 'client_id' # This is the id of the client that sent a put request.
CLIENT_MID = 'client_mid'

debug = False
output_logs = False
last_log_output = 0
debug_data = ""

# -----------------Key-Value Pairs-----------------#
master_dict = {}
my_log = []  # This is a log of all entries that this machine has seen from the user
# When a user sends a request to the leader, add it to the leaders log. Then
# the leader tries to send an a_e_rpc to all of the followers. If more than half
# of the followers respond with OK then the leader can commit the entry to
# master_dict. In subsequent a_e_rpc calls the leader will tell the followers
# what log entries are safe to commit
# An entry is a (key, value, term)
highest_committed_index = -1  # The index of the last log entry that the leader knows is committed.
# This is up to and including this index, so it is 5 entries at indices [0, 5] have been committed
replica_commit_entries = [] # A (maybe empty) list of entries for all replicas to commit
# This value is included in heartbeats and a_e_rpc to tell the followers what to commit.
mid_to_aok = {}  # A mapping from the mid sent in an a_e_rpc to the amount of A_OK messages it has received back
mid_time_sent = [] # List of (time, CLIENT_SRCE, CLIENT_MID, random mid, updates) where time represents
# the time where a mid of a a_e_rpc was sent if quorum is not reached after 1 second try again
consensus_timeout = 0.4
commit_prior_entries = False
# -----------------Variables Given------------------#

last = 0

SELECT_WAIT_TIME = 0.01  # 10 milliseconds
TERMINATOR = b'}\n'
buffer = b''


# Print the output given if debug is True
def log(string):
    if debug:
        print(string)

def output_log(string):
    if output_logs:
        print(string)


# Generate an id string based on the ascii values of the string given
def string_to_mid(string):
    result = 1
    for i in range(len(string)):
        result *= ord(string[i])
    return str(result)

def get_random_mid():
    # 0 - 34
    keyset = 'abcdefghijklmnopqrstuvwxyz123456789'
    length = 20
    output = ""
    for _ in range(length):
        output += keyset[random.randint(0, 34)]
    return output


# send a basic message message
def send_msg(dest_addr: str, type: str, mid: str):
    msg = {SRCE: my_id, DEST: dest_addr, LEADER: leader_id,
           TYPE: type, MID: mid}
    sock.send(json.dumps(msg).encode() + b'\n')


# Send a AppendEntriesRPC
def send_a_e_rpc(dest_addr: str, updates: list, client_id: str, client_mid: str, msg):
    if not updates:
        log("Sending heartbeat a_e_rpc")
    local_mid = get_random_mid()
    if updates:
        local_mid = str(hash(updates[-1]))
        mid_time_sent.append((time.time(), client_id, client_mid, local_mid, updates, msg))

    msg = {SRCE: my_id, DEST: dest_addr, LEADER: leader_id,
           TYPE: A_E_RPC, MID: local_mid, UPDATES: updates,
           COMMIT: highest_committed_index, CLIENT_ID: client_id, CLIENT_MID: client_mid,
           TERM: current_term}
    sock.send(json.dumps(msg).encode() + b'\n')
    log(F"sent a_e_rpc MID:{msg[MID]}")


# Sends a heartbeat message, used to make code more readable
def send_heartbeat():
    send_a_e_rpc("FFFF", [], "NOT USED", "NOT USED", "NOT USED")


def handle_get_put(message):
    key = message[KEY]
    if message[TYPE] == GET:
        if key in master_dict:
            # Key is in there, send it in an OK message
            log("Received a GET request for " + KEY + ", returning " + master_dict[key])
            msg = {"src": my_id, "dst": message[SRCE], "leader": leader_id,
                   "type": OK, "MID": message[MID], "value": master_dict[key]}

        else:
            # Key is not there, send an empty message back
            log(KEY + " Not in master dict, sending a empty string back")
            msg = {"src": my_id, "dst": message[SRCE], "leader": leader_id,
                   "type": OK, "MID": message[MID], "value": ""}
        sock.send(json.dumps(msg).encode() + b'\n')

    elif message[TYPE] == PUT:
        log("Updating log, sending out a_e_rpc to everyone else")
        my_log.append((key, message[VAL], current_term))
        send_a_e_rpc("FFFF", my_log, message[SRCE], message[MID], message)



    else:
        raise ValueError("Sent a message to handle_get_put() that was not a GET or PUT request!")


# Receive
def recv_msgs(sock):
    global buffer

    fresh_buf = sock.recv(16384)

    # is this sock shutting down?
    if len(fresh_buf) == 0:
        log(F"SOCKET SHUTTING DOWN{str(my_id)}")
        return None

    buffer += fresh_buf

    msgs = []
    while TERMINATOR in buffer:
        position = buffer.find(TERMINATOR) + len(TERMINATOR)
        msgs.append(json.loads(buffer[:position - 1].decode()))  # -1 to remove the \n, which json.loads won't want
        buffer = buffer[position:]

    return msgs


while True:
    if commit_prior_entries:
        for entry in my_log:
            master_dict[entry[0]] = entry[1]
        commit_prior_entries = False
    ready = select.select([sock], [], [], SELECT_WAIT_TIME)[0]

    if sock in ready:
        msgs = recv_msgs(sock)

        for msg in msgs:

            msg_type = msg[TYPE]
            mid_received = msg[MID]

            #---------------------GET or PUT REQUESTS-------------------#
            if msg_type in [GET, PUT]:
                log(F"got {str(msg_type)} message")
                if my_state == State.follower:
                    # Respond with a redirect message if this server is not the leader
                    send_msg(msg[SRCE], RD, msg[MID])
                elif my_state == State.leader:
                    log(F"this replica is the leader, handling the {str(msg_type)} message")
                    handle_get_put(msg)
                else:
                    #log("Got a get/put during an election, sending redirect back")
                    send_msg(msg[SRCE], RD, msg[MID])

            # ---------------------APPEND ENTRIES RPC-------------------#
            # Handle append_entries_rpc messages. This messages will always be from a leader -> follower
            elif msg_type == A_E_RPC:
                log(F"got A_E_RPC, MID:{str(msg[MID])}")
                last_heartbeat_recv = time.time()

                # If an election is happening, stop it as there has been a leader chosen
                if my_state == State.candidate:
                    log("received a heartbeat message during an election, returning to follower state")
                    my_state = State.follower

                if my_state == State.leader and msg[TERM] > current_term:
                    my_state = State.follower
                    continue
                if msg[TERM] < current_term:
                    continue
                leader_id = msg[SRCE]

                # If the highest index committed in the msg is greater than this replicas, commit up to that
                # index
                if msg[COMMIT] > highest_committed_index:
                    for i in range(highest_committed_index + 1, msg[COMMIT] + 1):
                        if i < len(my_log):
                            master_dict[my_log[i][0]] = my_log[i][1]
                        highest_committed_index = msg[COMMIT]

                if not msg[UPDATES]:
                    # No updates just means this is a heartbeat message
                    log("received a heartbeat message...")
                else:
                    # Need to add the new entries to my_log and then send an ok message back.
                    my_log.append(msg[UPDATES][-1])  # Append updates to the log

                    # Send A_OK messages back
                    msg = {SRCE: my_id, DEST: msg[SRCE], MID: mid_received, TYPE: A_OK,
                           LEADER: leader_id,  UPDATES: msg[UPDATES], CLIENT_ID: msg[CLIENT_ID],
                           CLIENT_MID: msg[CLIENT_MID]}
                    sock.send(json.dumps(msg).encode() + b'\n')

            # ---------------------APPEND OKAY MESSAGES-------------------#
            elif msg_type == A_OK:
                msg_mid = msg[MID]

                if msg_mid not in mid_to_aok or mid_to_aok[msg_mid] == -1: # Second clause if for if we are retrying
                    mid_to_aok[msg_mid] = (2, False)  # set it to 2 because we assume the leader can replicate it
                    # on its log,
                    # so the first A_OK it receives back will mean its replicated on 2 machines.
                    # The second parameter is if the entry has been committed
                elif (mid_to_aok[msg_mid])[1]:
                    continue
                else:
                    mid_to_aok[msg_mid] = (mid_to_aok[msg_mid][0] + 1, False) # Increment the tally then check

                if (mid_to_aok[msg_mid])[0] > (1 + len(replica_ids)) // 2.0:
                    mid_to_aok[msg_mid] = (mid_to_aok[msg_mid][0], True)
                    # Replicated on a majority of replicas (including the leader), safe to commit
                    log("Able to reach consensus, committing")
                    entry = msg[UPDATES]
                    master_dict[entry[-1][0]] = entry[-1][1] # Commit

                    # Now increment highest_committed_index
                    replica_commit_entries.append(entry[-1])
                    highest_committed_index += 1

                    # Modify mid_time_sent
                    for i, entry in enumerate(mid_time_sent):
                        if entry[2] == msg[CLIENT_MID]:
                            mid_time_sent.pop(i)
                            break

                    # Now need to send a response back to the client
                    log("Sending an OK message back to the client, as the key has been committed")
                    msg = {SRCE: my_id, DEST: msg[CLIENT_ID], TYPE: OK, LEADER: leader_id, MID: msg[CLIENT_MID]}
                    sock.send(json.dumps(msg).encode() + b'\n')

            # ---------------------REQUEST VOTE MESSAGES-------------------#
            elif msg_type == RV:
                if msg[TERM] not in terms_voted:
                    can_vote = True
                    if len(my_log) == 0:
                        can_vote = True
                    elif not msg[LAST_ENTRY]:
                        can_vote = True
                    elif msg[LAST_ENTRY][2] > my_log[-1][2]:
                        can_vote = True
                    elif msg[LAST_ENTRY][2] < my_log[-1][2]:
                        can_vote = False
                    elif msg[LAST_ENTRY][2] == my_log[-1][2]:
                        if len(my_log) > msg[LENGTH]:
                            can_vote = False
                        else:
                            can_vote = True
                    if can_vote:
                        # Good to vote for the server that sent the request vote message
                        log("got a request vote message, voting for that replica")
                        send_msg(msg[SRCE], VOTE, mid_received)
                        terms_voted.append(msg[TERM])
            # Handle vote messages
            elif msg_type == VOTE and my_state == State.candidate:
                log("received a vote, updating tally")
                votes_received += 1
                if votes_received > ((1 + len(replica_ids)) // 2.0):
                    # The election is won, set this server to the leader
                    log("-----------------------------------------------------------------")
                    log(F"Votes received is greater than the number of replicas / 2, "
                        F"this replica won, id:{str(my_id)}")
                    log("-----------------------------------------------------------------")
                    my_state = State.leader
                    leader_id = my_id
                    # Send out a heartbeat message to everyone else, which informs the other servers of the new leader
                    send_heartbeat()
                    last_heartbeat_sent = time.time()
                    commit_prior_entries = True


    clock = time.time()
    # Check if any of the a_e_rpc have timed out
    retry_list = []
    for entry in mid_time_sent:
        if clock - entry[0] > consensus_timeout:
            output_log("=======================RETRYING COMMIT AS TIMEOUT HAS EXPIRED=========================")
            request = entry[5]
            output_log(request)
            output_log("======================================================================================")
            sock.send(json.dumps(request).encode() + b'\n')
            mid_to_aok[entry[3]] = -1

            #send_a_e_rpc("FFFF", my_log, entry[1], entry[2])
            mid_time_sent.remove(entry)


    election_timeout_happened = clock - last_heartbeat_recv > election_timeout and my_state == State.follower
    election_window_passed = time.time() - election_start > election_window and my_state == State.candidate
    if election_timeout_happened or election_window_passed:
        # Start an election, it has been more than the election timeout since the last heartbeat message
        # or start another election if the election window has passed
        if election_timeout_happened:
            log("-----------------------------------------------------------------\n"
                "Starting a election due to the election timeout passing (no heartbeat)\n"
                "-----------------------------------------------------------------")
        elif election_window_passed:
            log("-----------------------------------------------------------------\n"
                "Starting a election due to the previous election taking too long (no winner)\n"
                "-----------------------------------------------------------------")

        votes_received = 0
        current_term += 1
        my_state = State.candidate

        # Vote for itself
        votes_received += 1
        terms_voted.append(current_term)

        mid = string_to_mid(my_id)
        election_start = time.time()

        # Send a request vote message to everyone else
        log("sending RV messages to all other replicas")
        if len(my_log) > 0:
            last_ent = my_log[-1]
        else:
            last_ent = []
        msg = {SRCE: my_id, DEST: "FFFF", LEADER: "FFFF",
               TYPE: RV, MID: mid, TERM: current_term, LENGTH: len(my_log),
               LAST_ENTRY: last_ent}
        sock.send(json.dumps(msg).encode() + b'\n')
    # Continue in this state until it wins the election, someone else wins(HB received), or the timeout passes

    # If this server is a leader, send an empty a_e_rpc message every 2 seconds that
    # there arnt any other a_e_rpc messages
    if my_state == State.leader and time.time() - last_heartbeat_sent > heartbeat_interval:
        send_heartbeat()
        last_heartbeat_sent = time.time()

    if time.time() - last_log_output > 2 and output_logs:
        if my_id == leader_id:
            output_log(F"----------------LEADER LOG, ID{my_id}----------")
        else:
            output_log(F"---------------REPLICA LOG, ID:{my_id}----------")
        for k, v in master_dict.items():
            print(k, v)
        output_log("---------------------")
        last_log_output = time.time()